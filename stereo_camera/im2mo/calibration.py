import cv2
import numpy as np
import time
import os

# --- 1. ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ (Configuration) ---
# ‡∏Ç‡∏ô‡∏≤‡∏î chessboard (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏∏‡∏°‡∏î‡πâ‡∏≤‡∏ô‡πÉ‡∏ô ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡πà‡∏≠‡∏á)
pattern_size = (10, 7)
square_size = 0.025  # ‡πÄ‡∏°‡∏ï‡∏£ (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å! ‡∏ï‡πâ‡∏≠‡∏á‡∏ß‡∏±‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏´‡πâ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥)

# ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏à‡∏∏‡∏î 3D ‡∏Ç‡∏≠‡∏á chessboard ‡πÉ‡∏ô‡πÇ‡∏•‡∏Å‡∏à‡∏£‡∏¥‡∏á (Object Points)
# ‡∏™‡∏£‡πâ‡∏≤‡∏á grid ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏ó‡πà‡∏≤ pattern_size ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏π‡∏ì‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡∏ô‡∏≤‡∏î‡∏ä‡πà‡∏≠‡∏á
objp = np.zeros((pattern_size[0] * pattern_size[1], 3), np.float32)
objp[:, :2] = np.mgrid[0:pattern_size[0], 0:pattern_size[1]].T.reshape(-1, 2)
objp *= square_size

# List ‡πÄ‡∏Å‡πá‡∏ö‡∏à‡∏∏‡∏î
objpoints = []  # 3D points in real world space
imgpointsL = [] # 2D points in left image plane
imgpointsR = [] # 2D points in right image plane

# --- 2. ‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û (Image Acquisition) ---
# ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏Ç device ‡∏ï‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á (‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô 0, 1 ‡∏´‡∏£‡∏∑‡∏≠ 1, 2)
capL = cv2.VideoCapture(1)
capR = cv2.VideoCapture(0)

# ‚≠ê ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö UI feedback
capture_message_display_time = 0
message = ""

print("‡∏°‡∏≠‡∏á‡∏´‡∏≤ Chessboard ‡πÉ‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß...")
print("‡∏Å‡∏î 'c' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö | ‡∏Å‡∏î 'ESC' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì")

while True:
    retL, frameL = capL.read()
    retR, frameR = capR.read()
    if not retL or not retR:
        print("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ")
        break

    grayL = cv2.cvtColor(frameL, cv2.COLOR_BGR2GRAY)
    grayR = cv2.cvtColor(frameR, cv2.COLOR_BGR2GRAY)

    # ‡∏´‡∏≤ chessboard corners
    retL_corners, cornersL = cv2.findChessboardCorners(grayL, pattern_size, None)
    retR_corners, cornersR = cv2.findChessboardCorners(grayR, pattern_size, None)

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    visL, visR = frameL.copy(), frameR.copy()

    # ‚≠ê ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡πà‡∏≤‡∏¢‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
    cv2.putText(visL, f"Frames: {len(objpoints)}", (50, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
    cv2.putText(visR, f"Frames: {len(objpoints)}", (50, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

    if retL_corners: cv2.drawChessboardCorners(visL, pattern_size, cornersL, retL_corners)
    if retR_corners: cv2.drawChessboardCorners(visR, pattern_size, cornersR, retR_corners)
    
    # ‚≠ê ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° feedback ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏´‡∏•‡∏±‡∏á‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û
    if time.time() < capture_message_display_time:
        cv2.putText(visL, message, (50, 100), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)
        cv2.putText(visR, message, (50, 100), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)


    cv2.imshow('Left Camera', visL)
    cv2.imshow('Right Camera', visR)

    key = cv2.waitKey(1)
    if key == ord('c') and retL_corners and retR_corners:
        # ‚≠ê ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏î‡πâ‡∏ß‡∏¢ cornerSubPix
        # ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏°‡∏∏‡∏°‡∏ó‡∏µ‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏ß‡πà‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•
        criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 30, 0.001)
        cornersL_subpix = cv2.cornerSubPix(grayL, cornersL, (11, 11), (-1, -1), criteria)
        cornersR_subpix = cv2.cornerSubPix(grayR, cornersR, (11, 11), (-1, -1), criteria)
        
        # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà refine ‡πÅ‡∏•‡πâ‡∏ß
        objpoints.append(objp)
        imgpointsL.append(cornersL_subpix)
        imgpointsR.append(cornersR_subpix)
        
        message = f"Captured frame {len(objpoints)}!"
        print(message)
        capture_message_display_time = time.time() + 1.5 # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° 1.5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

    elif key == 27:  # ESC ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î
        if len(objpoints) < 10:
            print("Warning: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏†‡∏≤‡∏û‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ 15-20 ‡∏†‡∏≤‡∏û) ‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÑ‡∏°‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥")
        break

capL.release()
capR.release()
cv2.destroyAllWindows()

if len(objpoints) == 0:
    print("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏à‡∏∞‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡∏ß‡∏•‡∏á")
    exit()

print("\n‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• Calibration... ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...")

# --- 3. ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Calibration ---
image_size = grayL.shape[::-1]

# üîπ Calibration ‡πÅ‡∏¢‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á
# ‚≠ê ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ re-projection error ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢ (retL, retR)
retL, mtxL, distL, rvecsL, tvecsL = cv2.calibrateCamera(objpoints, imgpointsL, image_size, None, None)
retR, mtxR, distR, rvecsR, tvecsR = cv2.calibrateCamera(objpoints, imgpointsR, image_size, None, None)

# üîπ Stereo Calibration
# ‚≠ê ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ re-projection error ‡∏Ç‡∏≠‡∏á stereo ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢ (ret)
ret, _, _, _, _, R, T, E, F = cv2.stereoCalibrate(
    objpoints, imgpointsL, imgpointsR,
    mtxL, distL, mtxR, distR,
    image_size,
    criteria=(cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 1e-5),
    flags=cv2.CALIB_FIX_INTRINSIC
)

# --- 4. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ---
print("\n--- Calibration Results ---")
print(f"Left Camera RMS re-projection error: {retL:.4f} pixels")
print(f"Right Camera RMS re-projection error: {retR:.4f} pixels")
print(f"Stereo RMS re-projection error: {ret:.4f} pixels")
print("--> (‡∏Ñ‡πà‡∏≤ error ‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 1.0, ‡∏¢‡∏¥‡πà‡∏á‡πÉ‡∏Å‡∏•‡πâ‡∏¢‡∏¥‡πà‡∏á 0 ‡∏î‡∏µ)")

# üîπ ‡πÅ‡∏™‡∏î‡∏á Baseline
baseline = np.linalg.norm(T)
print(f"\nBaseline distance: {baseline * 100:.2f} cm") # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô cm ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏á‡πà‡∏≤‡∏¢

# üîπ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å calibration.npz
output_filename = "calibration.npz"
np.savez(output_filename,
         mtxL=mtxL, distL=distL,
         mtxR=mtxR, distR=distR,
         R=R, T=T,
         E=E, F=F,
         image_size=image_size)
print(f"\nCalibration saved successfully to '{output_filename}'")

# ‚ú® ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î 3 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ü‡∏•‡πå
full_path = os.path.abspath(output_filename)
print(f"File location:")
print(f"--> {full_path}")